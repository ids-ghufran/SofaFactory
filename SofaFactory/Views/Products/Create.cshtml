@model Domain.Models.Product

@{
    ViewData["Title"] = "Create";
    Layout = "~/Views/Shared/_Shop_Layout.cshtml";
}

<div class="container-fluid px-5 py-5">
    <div class="card">
        <div class="card-header">
            <h4 class="card-title my-0">Add New Product</h4>
        </div>
        <div class="card-body">

            <form asp-action="Create" id="productForm">
                <div class="row">
                    @*<div class="col-md-4">*@
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <div class="form-group col-md-7">
                        <div class="mb-3">
                            <label asp-for="Name" class="control-label"></label>
                            <input asp-for="Name" class="form-control" />
                            <span asp-validation-for="Name" class="text-danger"></span>
                        </div>
                        <div class="mb-3">
                            <label for="Description" class="control-label">Seo Description</label>
                            <textarea asp-for="Description" class="form-control"></textarea>
                            <span asp-validation-for="Description" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="col-md-5">
                        <div class="file-uploader-container" id="file-uploader">
                            <div class="image-preview"></div>
                            <div class="file-controls">
                                <input type="file" class="file-input d-none" id="file-input" />
                                <h5 class="file-control-label">Drag And Drop the files</h5>
                                <button class="btn btn-light border">Select File</button>
                            </div>
                        </div>
                    </div>
                    <div class="form-group col-md-7">
                        <div class="mb-3">
                            <label asp-for="Details" class="control-label"></label>
                            <textarea rows="1" asp-for="Details" class="form-control"></textarea>
                            <span asp-validation-for="Details" class="text-danger"></span>
                        </div>
                        <div class="mb-3">
                            <label asp-for="Highlights" class="control-label"></label>
                            <textarea asp-for="Highlights" class="form-control"></textarea>
                            <span asp-validation-for="Highlights" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="form-group col-md-5">
                        <div class="form-group ">
                            <label asp-for="CategoryId" class="control-label"></label>
                            <select asp-for="CategoryId" class="form-control">
                                <option>Select Category</option>
                                @foreach (var cat in ViewBag.CategoryId)
                                {
                                    <option value="@cat.CategoryId">@cat?.Name</option>
                                }
                            </select>
                        </div>
                        <div class="form-group ">
                            <label asp-for="SubCategoryId" class="control-label"></label>
                            <select asp-for="SubCategoryId" class="form-control">
                                <option>Select Sub Category</option>
                                @foreach (var cat in ViewBag.CategoryId)
                                {
                                    <option value="@cat.CategoryId">@cat?.Name</option>
                                }
                            </select>
                        </div>
                        <div class="form-group ">
                            <label asp-for="Discount" class="control-label"></label>
                            <input asp-for="Discount" class="form-control" />

                            <span asp-validation-for="Discount" class="text-danger"></span>
                        </div>
                        <div class="form-group">
                            <label asp-for="DiscountType" class="control-label"></label>
                            <select name="Discount" class="form-control" id="DiscountType">
                                <option>Select Discount Type</option>
                                <option value="1">Flat</option>
                                <option value="2">Percent</option>
                            </select>
                            <span asp-validation-for="DiscountType" class="text-danger"></span>
                        </div>

                    </div>

                    <div class="form-group col-md-4">
                        <label asp-for="Rating" class="control-label"></label>
                        <input asp-for="Rating" class="form-control" />
                        <span asp-validation-for="Rating" class="text-danger"></span>
                    </div>
                    <div class="form-group col-md-4">
                        <label asp-for="Quantity" class="control-label"></label>
                        <input asp-for="Quantity" class="form-control" />
                        <span asp-validation-for="Quantity" class="text-danger"></span>
                    </div>
                    <div class="form-group col-md-4">
                        <label asp-for="Dimensions" class="control-label"></label>
                        <input asp-for="Dimensions" class="form-control" />
                        <span asp-validation-for="Dimensions" class="text-danger"></span>
                    </div>

                    <div class="form-group col-md-4">
                        <label asp-for="Color" class="control-label"></label>
                        <input asp-for="Color" class="form-control" />
                        <span asp-validation-for="Color" class="text-danger"></span>
                    </div>
                    <div class="form-group col-md-4">
                        <label asp-for="Warranty" class="control-label"></label>
                        <input asp-for="Warranty" class="form-control" />
                        <span asp-validation-for="Warranty" class="text-danger"></span>
                    </div>
                    <div class="form-group col-md-4">
                        <label asp-for="SeatingCapacity" class="control-label"></label>
                        <input asp-for="SeatingCapacity" class="form-control" />
                        <span asp-validation-for="SeatingCapacity" class="text-danger"></span>
                    </div>
                    <div class="form-group col-md-4">
                        <label asp-for="AssemblyDetails" class="control-label"></label>
                        <input asp-for="AssemblyDetails" class="form-control" />
                        <span asp-validation-for="AssemblyDetails" class="text-danger"></span>
                    </div>
                    <div class="form-group col-md-4">
                        <label asp-for="PackageDetails" class="control-label"></label>
                        <input asp-for="PackageDetails" class="form-control" />
                        <span asp-validation-for="PackageDetails" class="text-danger"></span>
                    </div>
                    <div class="form-group col-md-6">
                        <input id="submitBtn" type="button" value="Create" class="btn btn-primary" />

                    </div>
                </div>
                @*</div>*@
            </form>


        </div>
        <div class="card-footer">
            <a asp-action="Index">Back to List</a>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script src="~/lib/summernote-0.8.18-dist/summernote-bs4.min.js"></script>
    <script>$('#Details').summernote({
            placeholder: 'Add Product Details',
            tabsize: 2,
            height: 100
        });

        $('#Highlights').summernote({
            placeholder: 'Add Product Highlights.',
            tabsize: 2,
            height: 100
        });

        function validateFileType(file) {
            var validTypes = new Set(['jpeg', 'jpg', 'webp', 'png', 'svg']);
            var fileName = file.name;
            let temp = fileName.split('.');
            let ext = temp[temp.length - 1];
            return validTypes.has(ext);
        }


        function validateAspectRatio(fileInput, expectedAspectRatio) {
            return new Promise((resolve, reject) => {
                const file = fileInput;

                if (!file) {
                    // No file selected
                    resolve(false);
                }

                const reader = new FileReader();

                reader.onload = function (event) {
                    const image = new Image();

                    image.onload = function () {
                        const aspectRatio = image.width / image.height;
                        // Compare the aspect ratio with the expected aspect ratio (e.g., 16:9)
                        if (Math.abs(aspectRatio - expectedAspectRatio) > 0.01) {
                            // Invalid aspect ratio
                            resolve(false);
                        } else {
                            // Valid aspect ratio
                            resolve(true);
                        }
                    };

                    image.src = event.target.result;
                };

                reader.readAsDataURL(file);
            });
        }
        class FileUploader {
            constructor(_opt) {
                let opt = { id: "", fileCount: 5, aspectRatio: 1, errorHandler: undefined, ..._opt }
                this.elementId = opt.id;
                this.files = [];
                this.errorHandler = opt.errorHandler;
                this.fileCount = opt.fileCount;
                this.aspectRatio = opt.aspectRatio;
                this.fileIp = document.querySelector(`#${opt.id}`);
                this.input = this.fileIp.querySelector("#file-input");
                this.btn = this.fileIp.querySelector("button");
                this.label = this.fileIp.querySelector(".file-control-label");
                this.previewElement = this.fileIp.querySelector(".image-preview");
                this.fileIp.addEventListener("dragover", (e) => this.handleDragOver(e));
                this.fileIp.addEventListener("dragleave", (e) => this.handleDragLeave(e));
                this.fileIp.addEventListener("drop", (e) => this.handleDrop(e));
                this.btn.type = "button";
                this.btn.addEventListener("click", () => this.input.click());
                this.input.addEventListener("change", (e) => this.handleFileSelect(e));
                console.log("label_c > ", this.label);
            }
            getFile() {
                return this.files;
            }
            handleFileSelect(e) {
                this.handleFiles(e.target.files);
                setTimeout(() => { e.target.value = null }, 1000)
            }
            handleDragOver(e) {
                e.preventDefault();
                this.label.innerHTML = "Drop";
            }
            handleDrop(e) {
                e.preventDefault();
                this.label.innerHTML = "Drag And Drop the files";
                const files = e.dataTransfer.files;
                this.handleFiles(files);
            }
            handleDragLeave(e) {
                e.preventDefault();
                //console.log("leave", label);
                this.label.innerHTML = "Drag And Drop the files";
            }
            updatePreview() {
                this.previewElement.innerHTML = "";
                for (const file of this.files) {
                    this.createFilePreview(file);
                }
            }
            createFilePreview(file) {
                console.log("file", file);
                const previewImage = document.createElement("img");
                previewImage.src = URL.createObjectURL(file.file);
                previewImage.alt = file.name;
                previewImage.style.width = "100%";
                var parent = document.createElement("div");
                parent.classList.add("image-item");
                var deleteBtn = document.createElement('button')
                deleteBtn.classList.add("delete-btn");
                deleteBtn.innerHTML = "<i class='fa fa-trash'></i>";
                deleteBtn.type = "button";
                deleteBtn.addEventListener("click", () => this.deleteFile(file));
                parent.appendChild(previewImage);
                parent.appendChild(deleteBtn);
                this.previewElement.appendChild(parent);
            }
            deleteFile(file) {
                this.files = this.files.filter((f) => f.id !== file.id);
                this.updatePreview();
            }
            async handleFiles(files) {
                if (this.files.length >= this.fileCount || (this.files.length + files.length > this.fileCount)) {
                    files = undefined;
                    alert(`Only ${this.fileCount} files can be uploaded`);
                    return;
                }
                for (const file of files) {
                    let length = this.files.length;
                    let validtype = validateFileType(file);
                    let validshape = await validateAspectRatio(file, this.aspectRatio);
                    if (validtype && validshape) {
                        let f = { "name": file.name, file: file, id: length == 0 ? length + 1 : this.files[length - 1].id + 1 };
                        this.files.push(f);
                        this.createFilePreview(f);
                    }
                    else {
                        if (!validtype) {
                            if (!this.errorHandler)
                                alert(`Please make sure that ${file.name} is image file.`);
                            else
                                this.errorHandler(`Please make sure that ${file.name} is image file.`)
                        }
                        else {
                            if (!this.errorHandler)
                                alert(`Please make sure that image file  have aspect ratio of ${this.aspectRatio}.`);
                            else
                                this.errorHandler(`Please make sure that image file  have aspect ratio of ${this.aspectRatio}.`)
                        }
                    }
                }
            }
        }

        var dragel = new FileUploader({ id: "file-uploader", fileCount: 4, aspectRatio: 1 });</script>

    <script>
    $(document).ready(function () {
        $('#submitBtn').click(function (e) {
            e.preventDefault(); // Prevent the default form submission behavior
            const formObj = {
                name: $("#Name").val(),
                    description : $("#Description").val(),
                    details : $("#Details").val(),
                    highlights : $("#Highlights").val(),
                    rating : $("#Rating").val(),
                    color : $("#Color").val(),
                    assemblyDetails : $("#AssemblyDetails").val(),
                    quantity : $("#Quantity").val(),
                    warranty : $("#Warranty").val(),
                    packageDetails : $("#PackageDetails").val(),
                    categoryId : $("#CategoryId").val(),
                    subCategoryId : $("#SubCategoryId").val(),
                    discount : $("#Discount").val(),
                    discountType : $("#DiscountType").val(),
                    dimensions : $("#Dimensions").val(),
                    seatingCapacity : $("#SeatingCapacity").val(),
            }
            var formData = toFormData(formObj)
            var imgs = dragel.getFile().map(x => x.file)
            for (var i = 0; i < imgs.length; i++) {
                formData.append("images", imgs[i])
            }

            console.log(formData, formObj)

            // Make an Ajax request
            $.ajax({
                type: 'POST',
                url: '@Url.Action("create", "Products")', // Replace with your controller and action names
                data: formData,
                processData: false, // Set this to false when using FormData
                contentType: false, // Set this to false when using FormData
                success: function (data) {
                    // Handle the response from the server, if needed
                    console.log(data);
                    window.location.href = "/products"
                },
                error: function (errors) {
                    // Handle any errors that occur during the Ajax request
                    console.log('Error:', errors);
                    for (var err in errors.responseJSON) {
                        console
                        $(`#${err}`).parent().append(`<span class="text-danger field-validation-error" data-valmsg-for="${err}" data-valmsg-replace="true"><span id="${err}-error" class="">${errors.responseJSON?.map(x => x)}</span></span>`)
                    }

                }
            });
        });
    });


        function toFormData(obj) {
            const formData = new FormData();
            for (const key in obj) {
                if (obj.hasOwnProperty(key)) {
                    formData.append(key, obj[key]);
                }
            }
            return formData;
        }

    </script>


}
@section Styles {
    <link href="~/lib/summernote-0.8.18-dist/summernote-bs4.min.css" rel="stylesheet" />
    <style>
        .file-uploader-container {
            padding: 5px;
            height: 100%;
            border: 2px dashed lightgray;
            border-radius: 10px;
            /* margin-bottom: 20px; */
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
        }

        .file-controls {
            position: relative;
            top: 30px;
            display: flex;
            flex-direction: column;
            width: 220px;
            text-align: center;
        }

        .file-uploader-container .image-preview {
            position: absolute;
            top: 9px;
            left: 25px;
            display: flex;
            justify-content: flex-start;
            gap: 20px;
            width: 90%;
        }

        .file-uploader-container .image-item {
            width: 70px;
            position: relative;
        }

        .file-uploader-container .delete-btn {
            border: 0px;
            height: 20px;
            width: 20px;
            background: red;
            color: white;
            border-radius: 5px;
            font-size: 10px;
            position: absolute;
            top: 0;
            right: -5px;
        }
    </style>
}